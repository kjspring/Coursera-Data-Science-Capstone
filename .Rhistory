png(filename="fig2.png", width = 480, height = 480, units="px")
fig2 <- ggplot(dat, aes(contraceptive_method, fill=media_exposure) )
fig2 + geom_bar(position="dodge") +
theme(panel.background = element_rect(fill='white', colour='black'))
dev.off()
png(filename="fig3.png", width = 480, height = 480, units="px")
fig3 <- ggplot(dat, aes(contraceptive_method, fill=standard_of_living) ) + geom_bar(position="dodge") +
theme(panel.background = element_rect(fill='white', colour='black'))
dev.off()
png(filename="fig3.png", width = 480, height = 480, units="px")
fig3 <- ggplot(dat, aes(contraceptive_method, fill=standard_of_living) )
fig3 + geom_bar(position="dodge") +
theme(panel.background = element_rect(fill='white', colour='black'))
dev.off()
dat <- read.csv("data.csv", stringsAsFactors=F)
dat$starttime <- strptime(dat$starttime, format="%Y-%m-%d %H:%M:%S")
dat$stoptime <- strptime(dat$stoptime, format="%Y-%m-%d %H:%M:%S")
# Find total time by subtracting the start from stop times
dat$totaltime <- difftime(dat$stoptime, dat$starttime, units="secs")
# Find the average lenght of a trip in seconds
mean(dat$totaltime)
# Time difference of 886.5745 secs
# Estimate the minimum fraction of the original dataset that must be missing
## First sort the data by bikeid
dat1 <- dat[with(dat, order(bikeid, starttime)),]
# Convert to Date object
dat1$starttime <- as.Date(dat1$starttime, format="%Y-%m-%d")
dat1$stoptime <- as.Date(dat1$stoptime, format="%Y-%m-%d")
dat1 <- dat[with(dat, order(bikeid, starttime)),]
dat1$starttime_D <- as.Date(dat1$starttime, format="%Y-%m-%d")
daily_station_wait <- vector()
rider_station_wait <- vector()
travels  <- as.matrix(data.frame(origin=dat$start.station.id, destination=dat$end.station.id)) # edgelist
g <- graph.data.frame(travels) # create adjacency matrix
g_less <- delete.edges(g, which(E(g)$weight != 6000))
## calculate the degree for each station
deg <- degree(g)
## Order the degree vector from least to most
deg <- deg[order(deg)]
deg["fe2a5f"]
deg["fec8ff"]
# Estimate the number of bikes at station 8f0f64 and 4a4b61 for each hour on the hour of 2013/10/30
stations <- c('8f0f64', '4a4b61')
date <- as.Date("2013-10-30")
dat2 <- dat[with(dat, order(starttime, bikeid)),]
dat3 <- subset(dat2, starttime_D==date)
dat2$starttime_D <- as.Date(dat2$starttime, format="%Y-%m-%d")
dat3 <- subset(dat2, starttime_D==date)
dat_4 <- subset(dat3, start.station.id == stations[1])
dat_5 <- subset(dat3, start.station.id == stations[2])
dat_4$hour <- format(dat_4$starttime, format="%H")
dat_4$minute <- format(dat_4$starttime, format="%M")
dat_5$hour <- format(dat_5$starttime, format="%H")
dat_5$minute <- format(dat_5$starttime, format="%M")
### Modular arithmetic to find if the bike is there on the hour
dat_4sub <- dat_4[as.numeric(dat_4$minute)%%(60) == 0, ] # subset so only riders at the station are counted
hourly_dat <- matrix(data=NA, nrow=24, ncol=2) # preallocate matrix
for (i in 0:23) {
hourly_dat[i+1, 1] <- i # add to data frame
hourly_dat[i+1, 2] <- nrow(dat_4sub[dat_4sub$hour == as.numeric(i), ])
}
dat_5sub <- dat_5[as.numeric(dat_5$minute)%%(60) == 0, ] # subset so only riders at the station are counted
hourly_dat5 <- matrix(data=NA, nrow=24, ncol=2) # preallocate matrix
for (i in 0:23) {
hourly_dat5[i+1, 1] <- i # add to data frame
hourly_dat5[i+1, 2] <- nrow(dat_5sub[dat_4sub$hour == as.numeric(i), ])
}
hourly_dat <- cbind(hourly_dat, hourly_dat5[,2])
hourly_dat_frame <- as.data.frame(hourly_dat)
colnames(hourly_dat_frame) <- c("hour", '8f0f64', '4a4b61')
hourly_dat_frame
stations <- c('912d97', '2da8d7', '010d01', '36ba2f', 'fa4911')
date <- as.Date('2013-11-26')
## Subset the data to get only these stations
dat2 <- dat1[dat1$start.station.id %in% stations, ]
dat2$day <- weekdays(dat2$starttime_D) # add day of the week
dat2$hour <- format(dat2$starttime, format="%H")
## Find the average bike use for each weekday for each station
past <- matrix(NA, nrow=24, ncol=length(stations) + 1) # preallocate matrix for past data
past[,1] <- 0:23 # add the hours to the matrix
for (i in 1:length(stations)){
dat3 <- dat2[dat2$start.station.id == stations[i], ]
dat3 <- dat3[dat3$day == weekdays(date), ]
for (e in 0:23) {
past[e+1, i+1] <- ceiling(nrow(dat3[as.numeric(dat3$hour) == e, ]) / length(unique(dat3$starttime_D)))
}
}
past
predict <- as.data.frame(past)
colnames(predict) <- c("hour", stations)
predict
numbers <- [1, 2, 3, 4]
for (num in numbers) {
print num
}
for (num in numbers) {
print num
numbers <- [1, 2, 3, 4]
for (num in numbers) {
print(num)
}
numbers <- [1, 2, 3, 4]
for (num in 1:length(numbers)) {
print(num)
}
numbers <- [1, 2, 3, 4]
numbers <- list(1, 2, 3, 4)
for (num in 1:length(numbers)) {
print(num)
}
numbers <- list(1, 4, 3, 4)
for (num in 1:length(numbers)) {
print(num)
}
numbers <- list(1, 4, 3, 4)
for (num in 1:length(numbers)) {
print(numbers[num])
}
?rnorm
days <- rnorm(100, mean=21, sd=3)
hist(days)
days <- rnorm(100, mean=12.7, sd=4.31)
hist(days)
length(which(days>21))
days <- rnorm(1000, mean=12.7, sd=4.31)
length(which(days>21))
length(which(days>21))/length(days)
12.7-4.31
12.7+4.31
max(days)
days <- rnorm(10000, mean=12.7, sd=4.31)
length(which(days>21))/length(days)
days <- rnorm(1000000, mean=12.7, sd=4.31)
length(which(days>21))/length(days)
max(days)
days <- rnorm(1000, 15.3, 9.3)
length(which(days>21)) / length(days)
days <- rnorm(1000, 14.1, 9.3)
length(which(days>21)) / length(days)
f <- function(x) {
x^4-2*x^3+x+1
}
x <- runif(10, -1, 3)
print (x)
x <- runif(100, -1, 3)
plot(x, f(x))
f(3)
f` <- function(x) {
4*x^3 - 6*x^2 + 1
}
`
g <- function(x) {
4*x^3 - 6*x^2 + 1
}
plot(x, g(x))
f(1.4)
f(1.5)
f(1.3)
f(1.45)
f(1.35)
f(1.32)
f(1.36)
f(1.37)
f(1.38)
3*16-24
(-1)^3
(-1)^(1/3)
(1)^(1/3)
g <- function(x) {
x^(1/3)
}
x <- runif(100, -1, 1)
plot(x, g(x))
h <- function(t) {
t/(t-3)
}
t <- runif(100, 4, 5)
plot(t, h(t))
f <- function(x) {
if(x >= 0 & x <= 1) {2*x+4}
if(x>1 & x <= 3) {6*x^2}
}
x <- runif(100, 0, 3)
plot(x, f(x))
f <- function(x) {
if(x >= 0 && x <= 1) {2*x+4}
if(x>1 && x <= 3) {6*x^2}
}
x <- runif(100, 0, 3)
plot(x, f(x))
f(1)
f(1)
f
f <- function(x) {
if(x >= 0 && x <= 1) {return 2*x+4}
if(x>1 && x <= 3) {return 6*x^2}
}
x <- runif(100, 0, 3)
plot(x, f(x))
?apply
f(x)
?sapply
sapply(x, f)
f <- function(x) {
y <- vector()
for(i in 1:length(x))
if(x >= 0 && x <= 1) {
y[x] <- 2*x+4
}
if(x>1 && x <= 3) {
y[x] <- 6*x^2
}
}
x <- runif(100, 0, 3)
f <- function(x) {
y <- vector()
for(i in 1:length(x))
if(x >= 0 && x <= 1) {
y[x] <- 2*x+4
}
if(x>1 && x <= 3) {
y[x] <- 6*x^2
}
return y
}
f <- function(x) {
y <- vector()
for(i in 1:length(x))
if(x >= 0 && x <= 1) {
y[x] <- 2*x+4
}
if(x>1 && x <= 3) {
y[x] <- 6*x^2
}
}
return y
}
f <- function(x) {
y <- vector()
for(i in 1:length(x)) {
if(x >= 0 && x <= 1) {
y[x] <- 2*x+4
}
if(x>1 && x <= 3) {
y[x] <- 6*x^2
}
}
return y
}
f <- function(x) {
y <- vector()
for(i in 1:length(x)) {
if(x >= 0 && x <= 1) {
y[x] <- 2*x+4
}
if(x>1 && x <= 3) {
y[x] <- 6*x^2
}
}
return(y)
}
f(1)
f(2)
f <- function(x) {
y <- vector()
for(i in 1:length(x)) {
if(x >= 0 && x <= 1) {
y[i] <- 2*x+4
}
if(x>1 && x <= 3) {
y[i] <- 6*x^2
}
}
return(y)
}
f(2)
f(x)
plot(x, f(x))
f(1)
f(2)
f(3)
f(4)
f(5)
f(6)
f(0)
x
f(0)
f(.5)
length(x)
f <- function(x) {
y <- vector()
for(i in 1:length(x)) {
if(x[i] >= 0 && x[i] <= 1) {
y[i] <- 2*x+4
}
if(x[i]>1 && x[i] <= 3) {
y[i] <- 6*x^2
}
}
return(y)
}
x <- runif(100, 0, 3)
plot(x, f(x))
f(3)
f(4)
f(2.5)
a <- f(x)
a
?seq
x <- seq(from=0, to=3, by=.1)
f(x)
x
length(x)
f(x)
warnings()
f <- function(x) {
y <- vector()
for(i in 1:length(x)) {
if(x[i] >= 0 && x[i] <= 1) {
y[i] <- 2*x[i]+4
}
if(x[i]>1 && x[i] <= 3) {
y[i] <- 6*x[i]^2
}
}
return(y)
}
f(x)
plot(x, f(x))
f(0)
f(3)
sqrt(3)*sqrt(12)
?tan
atan(-sqrt(3)/3)
f <- function(x) {
x^2 - 8*x - 9
}
x <- runif(100, -10, 10)
plot(x, f(x))
f <- function(x) {
x*sqrt(x-7)
}
plot(x, f(x))
f <- function(x) {
(3*x+14) / (2*sqrt(x+17))
}
plot(x, f(x))
f(1)
f(0)
f(-1)
f(-5)
f(-5.1)
f(-4.5)
f(4)
f(-4)
f(-3)
f(-3.5)
f(-4.2)
f(-4.1)
f(-4.3)
f(-4.4)
f(-4.5)
f(-4.6)
f(-4.7)
f(-4.8)
f(-4.75)
sqrt(0)
-14/3
f(-14/3)
-48/-9
48/3
.5^2 + 4.5
f <- function(x) {
x^2 - 9x - 13
}
plot(x, f(x))
f <- function(x) {
x^2 - 9x - 13
}
plot(x, f(x))
f <- function(x) {
x^2 - 9*x - 13
}
plot(x, f(x))
x <- runif(100, 1, 6)
plot(x, f(x))
x <- runif(100, 0, 6)
plot(x, f(x))
x <- runif(100, -6, 6)
plot(x, f(x))
x <- runif(100, -2, 6)
plot(x, f(x))
-8^(2/3)
8^(2/3)
4-3
-8^(2/3)
(-8^(2/3))
(-8)^1/3
((-8)^(1/3))^2
(-8)^(1/3)
64^(1/3)
-84/3
84/3
6^3-9*6^2+6
x <- runif(100, -20, 20)
f <- function(x) {
x^(1/3) * (x^2 - 63)
}
x <- runif(100, -20, 20)
plot(x, f(x))
f <- function(x) {
x^(1/3)*(x^2-112)
}
x <- runif(100, -5, 5)
plot(x, f(x))
f(4)
-20/3
f <- function(x) {
x^(1/3)*(x^2-112)
}
x <- runif(100, -100, 100)
plot(x, f(x))
mean(8,9,10,11,12)
a <- c(8,9,10,11,12)
mean(a)
var(a)
sd(a)
sqrt(2.5)
1 - 0.05
file_location <- '~/Dropbox/courses/coursera/DataScience/10_Capstone/data/final/en_US/en_US.twitter.txt'
twitter <- scan.lines(file_location)
twitter <- scan(file_location)
?scan
length(readLines(file_location))
twitter <- readLines(file_location)
news <- readLines(news_location)
blog_location <- '~/Dropbox/courses/coursera/DataScience/10_Capstone/data/final/en_US/en_US.blog.txt'
news_location <- '~/Dropbox/courses/coursera/DataScience/10_Capstone/data/final/en_US/en_US.news.txt'
news <- readLines(news_location)
length(twitter)
str(news)
string <- "A computer once beat me at chess, but it was no match for me at kickboxing"
q6 <- grepl(string, twitter)
length(q6)
q6[1:10]
length(which(q6==TRUE))
ch_string <- 'biostats'
q5 <- grepl(ch_string, twitter)
which(q5 == TRUE)
twitter[which(q5 == TRUE)]
?grepl
love_string <- 'love'
hate_string <- 'hate'
love <- twitter[which(grepl(love_string, twitter))]
length(love)
hate <- twitter[which(grepl(hate_string, twitter))]
length(hate)
length(love)/length(hate)
nchar(twitter)
max(twitter)
twitter_max <- nchar(max(twitter))
news_max <- nchar(max(news))
blog_max <- nchar(max(glob))
blog_max <- nchar(max(blog))
blog <_ readLines(blog_location)
blog <- readLines(blog_location)
blog_location <- '~/Dropbox/courses/coursera/DataScience/10_Capstone/data/final/en_US/en_US.blogs.txt'
blogs <- readLines(blog_location)
blog_max <- nchar(max(blogs))
blog_max
news_max
(max(news)
)
max(blogs)
length(blogs)
sub_blog <- blog[1:25]
sub_blogs <- blogs[1:25]
sub_blogs
max(sub_blogs)
nchar(sub_blogs)
max(nchar(twitter))
max(nchar(news))
max(nchar(blogs))
48/9
48/3
sqrt(16/3+8)
-9*16/3+48
library(RWeka)
library(tm)
# File locations
twitter_location <- '~/Dropbox/courses/coursera/DataScience/10_Capstone/data/final/en_US/en_US.twitter.txt'
blog_location <- '~/Dropbox/courses/coursera/DataScience/10_Capstone/data/final/en_US/en_US.blogs.txt'
news_location <- '~/Dropbox/courses/coursera/DataScience/10_Capstone/data/final/en_US/en_US.news.txt'
# load in the data
twitter <- readLines(twitter_location)
news <- readLines(news_location)
blogs <- readLines(blog_location)
# Random subset of the data
random_twitter <- ceiling(runif(n=100000, min=0, max=length(twitter)))
random_news <- ceiling(runif(n=20000, min=0, max=length(news)))
random_blogs <- ceiling(runif(n=20000, min=0, max=length(blogs)))
# subset
twitter <- twitter[random_twitter]
news <- news[random_news]
blogs <- blogs[random_blogs]
write.table(twitter, file='Task1/output/twitter.txt', row.names=FALSE, col.names=FALSE)
write.table(news, file='Task1/output/news.txt', row.names=FALSE, col.names=FALSE)
write.table(blogs, file='Task1/output/blogs.txt', row.names=FALSE, col.names=FALSE)
setwd("~/projects/data_science_capstone")
write.table(twitter, file='Task1/output/twitter.txt', row.names=FALSE, col.names=FALSE)
write.table(news, file='Task1/output/news.txt', row.names=FALSE, col.names=FALSE)
write.table(blogs, file='Task1/output/blogs.txt', row.names=FALSE, col.names=FALSE)
